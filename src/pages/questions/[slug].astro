---
import Main from "@/layouts/Main.astro";
import {
  findQuestion,
  getPublishedQuestions,
  getQuestionCategories,
  getQuestionAuthor,
} from "@/lib/questions";
import BibleReferencesScript from "@/components/BibleReferencesScript.astro";

export function getStaticPaths() {
  return getPublishedQuestions().map((question) => ({
    params: { slug: question.slug },
  }));
}

const { slug } = Astro.params;
const question = findQuestion(slug);

if (!question) {
  throw new Error(`Question not found for slug "${slug}".`);
}

const questionCategories = getQuestionCategories(question);
const author = getQuestionAuthor(question);

const markdownFiles = import.meta.glob("@/content/questions/*.md", { eager: true });
const page = Object.values(markdownFiles).find((module) =>
  module.file?.endsWith(question.markdown)
);
const longPage = question.longExplanation
  ? Object.values(markdownFiles).find((module) => module.file?.endsWith(question.longExplanation))
  : null;
---

<Main title={`${question.title} - abolition.ing`}>
  <article class="question-article card-panel">
    <section class="question-header">
      <h1 class="page-title">{question.title}</h1>
    </section>

    <div class="question-body" data-bible-autolink>
      {page ? <page.Content /> : <p><em>Content not found.</em></p>}
    </div>

    {longPage ? (
      <div class="long-explanation" data-long-explanation>
        <button
          type="button"
          class="long-toggle"
          data-long-toggle
          aria-expanded="false"
        >
          Want a longer explanation?
        </button>
        <div class="long-content" data-long-content hidden data-bible-autolink>
          <longPage.Content />
        </div>
      </div>
    ) : null}
  </article>

  {author ? (
    <div class="resource-card card-panel question-author-card">
      <h2>{author.name}</h2>
      {author.bio ? <p class="resource-bio">{author.bio}</p> : null}

      <div class="resource-actions">
        {typeof author.count === "number" && author.count > 0 ? (
          <a class="resource-link" href={`/authors/${author.id}`}>
            View Answers ({author.count})
          </a>
        ) : null}
        {author.url ? (
          <a
            class="resource-link"
            href={author.url}
            target="_blank"
            rel="noopener noreferrer"
          >
            Visit website
          </a>
        ) : null}
      </div>
    </div>
  ) : null}

  {questionCategories.length ? (
    <div class="category-meta category-footer">
      <a class="category-chip" href="/categories">Categories</a>
      <ul class="category-list">
        {questionCategories.map((category) => (
          <li>
            <a class="category-chip" href={`/categories/${category.id}`}>{category.name}</a>
          </li>
        ))}
      </ul>
    </div>
  ) : (
    <p class="category-placeholder category-footer">Uncategorized</p>
  )}

  <BibleReferencesScript />

  {longPage ? (
    <script type="module" is:inline>
      document.querySelectorAll("[data-long-explanation]").forEach((section) => {
        const button = section.querySelector("[data-long-toggle]");
        const content = section.querySelector("[data-long-content]");
        if (!button || !content) {
          return;
        }

        const expandedText = {
          true: "Hide the long explanation",
          false: "Read the long explanation",
        };

        button.addEventListener("click", () => {
          const isExpanded = button.getAttribute("aria-expanded") === "true";
          const nextExpanded = !isExpanded;

          button.setAttribute("aria-expanded", String(nextExpanded));
          button.textContent = expandedText[String(nextExpanded)];

          if (nextExpanded) {
            content.hidden = false;
            content.scrollIntoView({ behavior: "smooth", block: "start" });
          } else {
            content.hidden = true;
          }
        });
      });
    </script>
  ) : null}
</Main>

